name: Deploy to Dev and Prod

on:
  push:
    branches:
      - dev
      - main
  workflow_dispatch:
    inputs:
      commit_id:
        description: 'Commit ID to deploy'
        required: true
        default: ''
      deploy_to:
        description: 'Specify the environment to deploy to (dev or prod)'
        required: true
        default: 'dev'

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_id != '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.commit_id }}

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Build with Maven
        run: mvn clean package

      - name: Create Tag
        id: create_tag
        run: |
          # Fetch the latest tag that matches the pattern R-2024-0.X
          latest_tag=$(git tag -l 'R-2024-0.*' | sort -V | tail -n1)

          # Extract the latest number and increment it
          if [ -z "$latest_tag" ]; then
            new_tag="R-2024-0.1"
          else
            latest_number=$(echo $latest_tag | sed -E 's/R-2024-0.//')
            next_number=$((latest_number + 1))
            new_tag="R-2024-0.$next_number"
          fi

          # Check if the new tag already exists
          while git ls-remote --tags origin | grep -q "refs/tags/$new_tag"; do
            echo "Tag $new_tag already exists. Incrementing tag..."
            next_number=$((next_number + 1))
            new_tag="R-2024-0.$next_number"
          done

          # Create and push the new tag
          echo "New tag: $new_tag"
          git tag $new_tag
          git push origin $new_tag
          echo "TAG=$new_tag" >> $GITHUB_ENV

      - name: Upload artifact to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: eb-artifact
          path: target/*.jar

  deploy_dev:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to == 'dev' }}

    steps:
      - name: Download artifact from GitHub
        uses: actions/download-artifact@v3
        with:
          name: eb-artifact
          path: target/

      - name: List files in target directory
        run: ls -l target/

      - name: Get artifact name
        id: get_artifact
        run: |
          latest_file=$(ls -t target/*.jar | head -n1)
          echo "::set-output name=latest_artifact::$latest_file"

      - name: Deploy to AWS Elastic Beanstalk (Dev)
        uses: einaregilsson/beanstalk-deploy@v15
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APP_NAME }}
          environment_name: dev-env  # Ensure this is the correct environment name for Dev
          region: ${{ secrets.AWS_REGION }}
          version_label: ${{ github.sha }}
          deployment_package: ${{ steps.get_artifact.outputs.latest_artifact }}
          use_existing_version_if_available: true

  deploy_prod:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to == 'prod' }}

    steps:
      - name: Download artifact from GitHub
        uses: actions/download-artifact@v3
        with:
          name: eb-artifact
          path: target/

      - name: List files in target directory
        run: ls -l target/

      - name: Get artifact name
        id: get_artifact
        run: |
          latest_file=$(ls -t target/*.jar | head -n1)
          echo "::set-output name=latest_artifact::$latest_file"

      - name: Deploy to AWS Elastic Beanstalk (Prod)
        uses: einaregilsson/beanstalk-deploy@v15
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APP_NAME }}
          environment_name: prod-env  # Ensure this is the correct environment name for Prod
          region: ${{ secrets.AWS_REGION }}
          version_label: ${{ github.sha }}
          deployment_package: ${{ steps.get_artifact.outputs.latest_artifact }}
          use_existing_version_if_available: true
